{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue254;\red0\green0\blue0;\red18\green112\blue68;
\red0\green0\blue255;\red15\green112\blue1;\red31\green99\blue128;\red157\green0\blue210;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;\cssrgb\c3529\c50588\c33725;
\cssrgb\c0\c0\c100000;\cssrgb\c0\c50196\c0;\cssrgb\c14510\c46275\c57647;\cssrgb\c68627\c0\c85882;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 //ESET \cf4 \strokec4 369\cf0 \cb1 \strokec3 \
\cb2 //LAB \cf4 \strokec4 8\cf0 \strokec3  PART A, Jonathan Venegas \cf5 \strokec5 and\cf0 \strokec3  Krish Sareen\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb2 \strokec6 #include <msp430.h>\cf0 \cb1 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2  \cf7 \strokec7 int\cf0 \strokec3  main(void)\{\cb1 \
\cb2     WDTCTL = WDTPW | WDTHOLD;   // hold the watchdog timer\cb1 \
\cb2     PM5CTL0 &= ~LOCKLPM5;  // clear LOCKLPM5 bit\cb1 \
\cb2     \cb1 \
\cb2     //setup GPIO pins\cb1 \
\cb2     P8DIR &= ~\cf5 \strokec5 0x\cf4 \strokec4 0F\cf0 \strokec3 ;\cb1 \
\cb2     P1DIR |= BIT0; //\cf7 \strokec7 set\cf0 \strokec3  P1\cf4 \strokec4 .0\cf0 \strokec3  to output\cb1 \
\cb2     P4DIR |= BIT7; //\cf7 \strokec7 set\cf0 \strokec3  P4\cf4 \strokec4 .7\cf0 \strokec3  to output\cb1 \
\cb2     P4OUT |= BIT7; //\cf7 \strokec7 set\cf0 \strokec3  pin to high\cb1 \
\cb2     \cb1 \
\cb2     P1DIR |= \cf5 \strokec5 0x\cf4 \strokec4 3C\cf0 \strokec3 ; // \cf7 \strokec7 set\cf0 \strokec3  P1\cf4 \strokec4 .5\cf0 \strokec3 ->P1\cf4 \strokec4 .2\cf0 \strokec3  to output\cb1 \
\cb2     \cb1 \
\cb2     // \cf7 \strokec7 set\cf0 \strokec3  P1\cf4 \strokec4 .5\cf0 \strokec3 ->P1\cf4 \strokec4 .2\cf0 \strokec3  to alt function \cf8 \strokec8 for\cf0 \strokec3  timers\cb1 \
\cb2     P1SEL1 &= ~\cf5 \strokec5 0x\cf4 \strokec4 3C\cf0 \strokec3 ; \cb1 \
\cb2     P1SEL0 |= \cf5 \strokec5 0x\cf4 \strokec4 3C\cf0 \strokec3 ; \cb1 \
\cb2     \cb1 \
\cb2     TA1CTL = TASSEL_2 | MC_1 | TACLR; //TA1CTL \cb1 \
\cb2     TA1CCR0 = \cf4 \strokec4 2000\cf0 \strokec3 ; //initial setup value\cb1 \
\cb2     \cb1 \
\cb2     TB0CTL = TASSEL_2 | MC_1 | TBCLR; //TB0CTL \cb1 \
\cb2     TB0CCR0 = \cf4 \strokec4 2000\cf0 \strokec3 ; //initial setup value\cb1 \
\cb2     \cb1 \
\cb2     \cb1 \
\cb2     //main loop\cb1 \
\cb2     \cf8 \strokec8 while\cf0 \strokec3 (\cf4 \strokec4 1\cf0 \strokec3 ) \{\cb1 \
\cb2         \cf8 \strokec8 if\cf0 \strokec3  (P8IN == \cf5 \strokec5 0x\cf4 \strokec4 0E\cf0 \strokec3 ) \{ // D-PAD UP\cb1 \
\cb2             TA1CCR1 = \cf4 \strokec4 0\cf0 \strokec3 ;\cb1 \
\cb2             TA1CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             \cb1 \
\cb2             TA1CCR2 = \cf4 \strokec4 0\cf0 \strokec3 ;\cb1 \
\cb2             TA1CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2         \}\cb1 \
\cb2         \cb1 \
\cb2         \cf8 \strokec8 else\cf0 \strokec3  \cf8 \strokec8 if\cf0 \strokec3 (P8IN == \cf5 \strokec5 0x\cf4 \strokec4 0B\cf0 \strokec3 ) //Left\cb1 \
\cb2         \{\cb1 \
\cb2             TA1CCR1 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR0 value\cb1 \
\cb2             TA1CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TA1CCR2 = \cf4 \strokec4 0\cf0 \strokec3 ;\cb1 \
\cb2             TA1CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\
\cb2             TB0CCR1 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR1 value\cb1 \
\cb2             TB0CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TB0CCR2 = \cf4 \strokec4 0\cf0 \strokec3 ; // TA1CCR2 value\cb1 \
\cb2             TB0CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2         \cb1 \
\cb2         \cf8 \strokec8 else\cf0 \strokec3  \cf8 \strokec8 if\cf0 \strokec3 (P8IN == \cf5 \strokec5 0x\cf4 \strokec4 07\cf0 \strokec3 ) //right\cb1 \
\cb2         \{\cb1 \
\cb2             TA1CCR1 = \cf4 \strokec4 1000\cf0 \strokec3 ; // TA1CCR0 value\cb1 \
\cb2             TA1CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TA1CCR2 = \cf4 \strokec4 2000\cf0 \strokec3 ;\cb1 \
\cb2             TA1CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\
\cb2             TB0CCR1 = \cf4 \strokec4 1000\cf0 \strokec3 ; // TA1CCR1 value\cb1 \
\cb2             TB0CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TB0CCR2 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR2 value\cb1 \
\cb2             TB0CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2         \}\cb1 \
\cb2         \cb1 \
\cb2         \cf8 \strokec8 else\cf0 \strokec3  \cf8 \strokec8 if\cf0 \strokec3 (P8IN == \cf5 \strokec5 0x\cf4 \strokec4 0D\cf0 \strokec3 )// down\cb1 \
\cb2         \{\cb1 \
\cb2             TA1CCR1 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR0 value\cb1 \
\cb2             TA1CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TA1CCR2 = \cf4 \strokec4 2000\cf0 \strokec3 ;\cb1 \
\cb2             TA1CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\
\cb2             TB0CCR1 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR1 value\cb1 \
\cb2             TB0CCTL1 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2             TB0CCR2 = \cf4 \strokec4 2000\cf0 \strokec3 ; // TA1CCR2 value\cb1 \
\cb2             TB0CCTL2 = OUTMOD_7; // mode \cf4 \strokec4 7\cf0 \cb1 \strokec3 \
\cb2         \}\cb1 \
\cb2     \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb2 \strokec8 return\cf0 \strokec3  \cf4 \strokec4 0\cf0 \strokec3 ;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \}\cb1 \
}